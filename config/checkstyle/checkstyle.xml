<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
        "https://checkstyle.org/dtds/configuration_1_3.dtd">
<module name="Checker">
    <module name="SuppressionFilter">
        <property name="file" value="${config_loc}/checkstyle-suppressions.xml"/>
    </module>
    <!--
    <module name="RegexpHeader">
        <property name="headerFile" value="${config_loc}/header.txt" />
        <property name="fileExtensions" value="java" />
    </module>
    -->
    <module name="io.spring.javaformat.checkstyle.SpringChecks">
        <property name="excludes"
                  value="io.spring.javaformat.checkstyle.check.SpringHeaderCheck,com.puppycrawl.tools.checkstyle.checks.imports.AvoidStarImportCheck"/>
    </module>
    <module name="TreeWalker">
        <module name="AvoidStarImport">
            <property name="allowStaticMemberImports" value="true"/>
        </module>
        <module name="IllegalImport">
            <property name="regexp" value="true"/>
            <property name="illegalPkgs"
                      value="^sun.*, ^org\.apache\.commons\.(?!compress|dbcp2|logging|pool2|net).*, ^com\.datastax\.oss\.driver\.shaded.*, ^com\.google\.common.*, ^io\.micrometer\.shaded.*, ^org\.flywaydb\.core\.internal.*, ^org\.testcontainers\.shaded.*, ^org\.hamcrest\.*"/>
            <property name="illegalClasses"
                      value="^com\.hazelcast\.util\.Base64, ^org\.junit\.rules\.ExpectedException, ^org\.mockito\.InjectMocks, ^org.springframework.context.annotation.ScannedGenericBeanDefinition, ^reactor\.core\.support\.Assert"/>
        </module>
        <module name="io.spring.javaformat.checkstyle.check.SpringJUnit5Check"/>
        <module name="RegexpSinglelineJava">
            <property name="maximum" value="0"/>
            <property name="format" value="org\.junit\.Assert|org\.junit\.jupiter\.api\.Assertions"/>
            <property name="message" value="Please use AssertJ imports."/>
            <property name="ignoreComments" value="true"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="maximum" value="0"/>
            <property name="format"
                      value="assertThatExceptionOfType\((NullPointerException|IllegalArgumentException|IOException|IllegalStateException)\.class\)"/>
            <property name="message" value="Please use specialized AssertJ assertThat*Exception method."/>
            <property name="ignoreComments" value="true"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="maximum" value="0"/>
            <property name="format" value="assertThatThrownBy\("/>
            <property name="message" value="Please use AssertJ assertThatExceptionOfType method."/>
            <property name="ignoreComments" value="true"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="maximum" value="0"/>
            <property name="format"
                      value="org\.mockito\.(Mockito|BDDMockito)\.(when|doThrow|doAnswer|doReturn|verify|verifyNoInteractions|verifyNoMoreInteractions)"/>
            <property name="message" value="Please use BDD-style (given, when, then) using BDDMockito imports."/>
            <property name="ignoreComments" value="true"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="maximum" value="0"/>
            <property name="format" value="(List|Map|Set)\.of\(\)"/>
            <property name="message"
                      value="Please use Collections.emptyList()/emptyMap()/emptySet() for creating empty lists/maps/sets."/>
            <property name="ignoreComments" value="true"/>
        </module>
    </module>
    <module name="RegexpMultiline">
        <property name="fileExtensions" value="java"/>
        <property name="maximum" value="0"/>
        <property name="format" value="Arrays(\s*)?\.asList\("/>
        <property name="message" value="Please use List.of(...) instead."/>
    </module>
</module>